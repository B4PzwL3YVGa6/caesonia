#	$OpenBSD: pf.conf,v 1.54 2014/08/23 05:49:42 deraadt Exp $
#
# See pf.conf(5) and /etc/examples/pf.conf

# read the log file: tcpdump -n -e -ttt -r /var/log/pflog
# real-time logging: tcpdump -neq -ttt -i pflog0
#                    tcpdump -nettti pflog0 action drop
#		     tcpdump -vvopn -i enc0
# show queue: pfctl -vvs queue
#             systat queues
# show stats: pfctl -s info
#             systat pf
# show states: pfctl -s states
#              systat states
# table stats: pfctl -v -t martians -T show
# show rule nr. 4: pfctl -v -s rules -R 4
# show rules, prepend rule numbers: pfctl -a '*' -vvsr
#                                   systat rules
# show limits: pfctl -s memory

# https://www.iana.org/assignments/iana-ipv4-special-registry/
# https://www.iana.org/assignments/iana-ipv6-special-registry/
table <martians> const persist counters { \
 0.0.0.0/8 10.0.0.0/8 100.64.0.0/10 127.0.0.0/8 169.254.0.0/16 \
 172.16.0.0/12 192.0.0.0/24 192.0.2.0/24 192.168.0.0/16 198.18.0.0/15 \
 198.51.100.0/24 203.0.113.0/24 240.0.0.0/4 255.255.255.255/32 \
 ::1/128 ::/128 ::/96 ::ffff:0:0/96 100::/64 2001::/32 2001:2::/48 \
 2001:db8::/32 fc00::/7 }

# Block bad hosts
table <permanentban> persist counters file "/etc/pf.permanentban"

# Options
set loginterface egress
set optimization normal
set block-policy drop
set skip on { lo0 }

# Queue assignment before nat-to http://marc.info/?l=openbsd-misc&m=149163915901383&w=2
# HFSC with FQ-CoDel (reduce bufferbloat and achieve fairness)
# http://theapt.org/~mike/hfsc-fq/
# www.reddit.com/r/openbsd/comments/6ttuhn/fq_codel_scheduling/
# www.reddit.com/r/openbsd/comments/75ps6h/fqcodel_and_pf/
# https://marc.info/?l=openbsd-misc&m=150787280714197
# (!) specify the upper bound within 90-95% of the expected bandwidth (bit/s)
# (!) raise the default queue limit from 50 to 1024 (1:1 ratio with flows)
queue outq on vio0 bandwidth 750M max 750M flows 1024 qlimit 1024 default

# Sanitizing packet content
# http://man.openbsd.org/pf.conf#Scrub
# no-df + random-id = unique IP identifiers
# max-mss must match net.inet.tcp.mssdflt in /etc/sysctl.conf
anchor "scrub" in {
 match in all scrub (no-df random-id max-mss 1440)
}

# Classification -- classify packets based on the defined firewall policy.

# Block spoofed traffic
# http://man.openbsd.org/pf.conf#Blocking_Spoofed_Traffic
antispoof log quick for { (egress) lo0 }

anchor "block" {
 # (!) disable log in production
 block log all

 anchor in {
  # Confound network scanners
  block log quick proto tcp all flags SF/SFRA
  ##block log quick proto tcp all flags SFUP/SFRAU
  block log quick proto tcp all flags FPU/SFRAUP
  block log quick proto tcp all flags /SFRA
  block log quick proto tcp all flags F/SFRA
  block log quick proto tcp all flags U/SFRAU
  ##block log quick proto tcp all flags P
  block log quick proto tcp all flags FUP/FUP

  anchor on egress {
   # Block incoming bad packets
   block log quick inet  proto icmp  all icmp-type  redir
   block log quick inet6 proto icmp6 all icmp6-type redir

   # Block incoming traffic from the undesirable
   block log quick \
    from { <martians> no-route urpf-failed <permanentban> }
  }
 }

 anchor out {
  anchor on egress {
   # Block outgoing traffic to the undesirable, and tell us it's blocked
   block return log quick \
    to { <martians> no-route }

   # Block outgoing traffic that hasn't been translated
   block log quick inet from ! (egress:0)
  }
 }
}

anchor "external" on egress {
 anchor out {
  anchor "self" proto { tcp udp } from (egress) {
   pass log (user) proto udp \
    to port domain \
    tag SELF_INET
   pass log (user) proto udp \
    to port ntp \
    user { _ntp root } \
    tag SELF_INET
   pass log (user) proto udp \
    from port bootpc to port bootps \
    tag SELF_INET
#  pass log inet6 proto udp \
#   from port dhcpv6-client to ff02::1:2 port dhcpv6-server \
#   tag SELF_INET
   pass log (user) proto tcp \
    to port { http https } \
    user { _ntp _pfetch _pkgfetch _relayd _syspatch _rspamd root puffy } \
    tag SELF_INET
   pass log (user) proto tcp \
    to port { ssh whois } \
    user { root puffy dsync } \
    tag SELF_INET
   pass log proto tcp \
    to port { smtp smtps } user { _smtpd _spamd } # (!) "log" for spamlogd
   pass log proto tcp \
    to port imaps \
    user _dovenull \
    tag SELF_INET
  }
 }

 anchor in proto { tcp udp } to (egress) {

# pass log inet6 proto udp \
#  to (egress) port dhcpv6-client \
#  tag INET_SELF

  # WWW
  pass log proto tcp \
   to (egress) port { http https } \
   keep state (max 500, max-src-conn-rate 100/10) \
   tag INET_SELF

  # SSH
  pass log proto tcp \
   to port ssh \
   keep state (max-src-conn-rate 100/10) \
   tag INET_SELF

  # MTA
  pass log proto tcp \
   to port smtp \
   tag INET_SELF

  # MSA and MUA
  pass log proto tcp \
   to (egress) port { submission imaps } \
   keep state (max-src-conn-rate 100/10) \
   tag INET_SELF
 }
}

anchor "icmp" {
 anchor "ipv4-icmp" inet proto icmp {
  # https://datatracker.ietf.org/doc/draft-ietf-opsec-icmp-filtering/history/
  # https://tools.ietf.org/html/draft-ietf-opsec-icmp-filtering-04
  pass     log inet proto icmp             icmp-type  3 code  0 keep state (max 32)
  pass     log inet proto icmp             icmp-type  3 code  1 keep state (max 32)
  pass in  log inet proto icmp to   (self) icmp-type  3 code  2 keep state (max 32)
  pass out log inet proto icmp from (self) icmp-type  3 code  2 keep state (max 32)
  pass in  log inet proto icmp to   (self) icmp-type  3 code  3 keep state (max 32)
  pass out log inet proto icmp from (self) icmp-type  3 code  3 keep state (max 32)
  pass     log inet proto icmp             icmp-type  3 code  4 keep state (max 32)
  pass in  log inet proto icmp to   (self) icmp-type  3 code  5 keep state (max 32)
  pass out log inet proto icmp from (self) icmp-type  3 code  5 keep state (max 32)
  pass out log inet proto icmp from (self) icmp-type  3 code  7 keep state (max 32)
  pass in  log inet proto icmp to   (self) icmp-type  3 code 11 keep state (max 32)
  pass out log inet proto icmp from (self) icmp-type  3 code 11 keep state (max 32)
  pass in  log inet proto icmp to   (self) icmp-type  3 code 12 keep state (max 32)
  pass out log inet proto icmp from (self) icmp-type  3 code 12 keep state (max 32)
  pass     log inet proto icmp             icmp-type  3 code 13 keep state (max 32)
  pass in  log inet proto icmp to   (self) icmp-type  3 code 14 keep state (max 32)
  pass out log inet proto icmp from (self) icmp-type  3 code 14 keep state (max 32)
  pass in  log inet proto icmp to   (self) icmp-type  3 code 15 keep state (max 32)
  pass out log inet proto icmp from (self) icmp-type  3 code 15 keep state (max 32)
  pass in  log inet proto icmp to   (self) icmp-type  5 code  0 keep state (max 32)
  pass out log inet proto icmp from (self) icmp-type  5 code  0 keep state (max 32)
  pass in  log inet proto icmp to   (self) icmp-type  5 code  1 keep state (max 32)
  pass out log inet proto icmp from (self) icmp-type  5 code  1 keep state (max 32)
  pass in  log inet proto icmp to   (self) icmp-type  5 code  2 keep state (max 32)
  pass out log inet proto icmp from (self) icmp-type  5 code  2 keep state (max 32)
  pass in  log inet proto icmp to   (self) icmp-type  5 code  3 keep state (max 32)
  pass out log inet proto icmp from (self) icmp-type  5 code  3 keep state (max 32)
  pass     log inet proto icmp             icmp-type 11 code  0 keep state (max 32)
  pass     log inet proto icmp             icmp-type 11 code  1 keep state (max 32)
  pass in  log inet proto icmp to   (self) icmp-type 12 code  0 keep state (max 32)
  pass out log inet proto icmp from (self) icmp-type 12 code  0 keep state (max 32)
  pass in  log inet proto icmp to   (self) icmp-type 12 code  1 keep state (max 32)
  pass out log inet proto icmp from (self) icmp-type 12 code  1 keep state (max 32)
  pass     log inet proto icmp             icmp-type  8 code  0 keep state (max 32)
  pass     log inet proto icmp             icmp-type  0 code  0 keep state (max 32)
  pass in  log inet proto icmp to   (self) icmp-type 10 code  0 keep state (max 32)
  pass out log inet proto icmp from (self) icmp-type 10 code  0 keep state (max 32)
  pass in  log inet proto icmp to   (self) icmp-type  9 code  0 keep state (max 32)
  pass out log inet proto icmp from (self) icmp-type  9 code  0 keep state (max 32)
  pass in  log inet proto icmp to   (self) icmp-type 13 code  0 keep state (max 32)
  pass out log inet proto icmp from (self) icmp-type 13 code  0 keep state (max 32)
  pass in  log inet proto icmp to   (self) icmp-type 14 code  0 keep state (max 32)
  pass out log inet proto icmp from (self) icmp-type 14 code  0 keep state (max 32)
  pass in  log inet proto icmp to   (self) icmp-type 17 code  0 keep state (max 32)
  pass out log inet proto icmp from (self) icmp-type 17 code  0 keep state (max 32)
  pass in  log inet proto icmp to   (self) icmp-type 18 code  0 keep state (max 32)
  pass out log inet proto icmp from (self) icmp-type 18 code  0 keep state (max 32)
 }
 anchor "ipv6-icmp" inet6 proto icmp6 {
  # RFC 4890: Recommendations for Filtering ICMPv6 Messages in Firewalls
  pass     log inet6 proto icmp6             icmp6-type   1 code  0 keep state (max 32)
  pass     log inet6 proto icmp6             icmp6-type   1 code  1 keep state (max 32)
  pass in  log inet6 proto icmp6 to   (self) icmp6-type   1 code  2 keep state (max 32)
  pass out log inet6 proto icmp6 from (self) icmp6-type   1 code  2 keep state (max 32)
  pass     log inet6 proto icmp6             icmp6-type   1 code  3 keep state (max 32)
  pass     log inet6 proto icmp6             icmp6-type   1 code  4 keep state (max 32)
  pass in  log inet6 proto icmp6 to   (self) icmp6-type   1 code  5 keep state (max 32)
  pass out log inet6 proto icmp6 from (self) icmp6-type   1 code  5 keep state (max 32)
  pass     log inet6 proto icmp6             icmp6-type   1 code  6 keep state (max 32)
  pass     log inet6 proto icmp6             icmp6-type   2 code  0 keep state (max 32)
  pass     log inet6 proto icmp6             icmp6-type   3 code  0 keep state (max 32)
  pass     log inet6 proto icmp6             icmp6-type   3 code  1 keep state (max 32)
  pass in  log inet6 proto icmp6 to   (self) icmp6-type   4 code  0 keep state (max 32)
  pass out log inet6 proto icmp6 from (self) icmp6-type   4 code  0 keep state (max 32)
  pass in  log inet6 proto icmp6 to   (self) icmp6-type   4 code  1 keep state (max 32)
  pass out log inet6 proto icmp6 from (self) icmp6-type   4 code  1 keep state (max 32)
  pass     log inet6 proto icmp6             icmp6-type   4 code  2 keep state (max 32)
  pass     log inet6 proto icmp6             icmp6-type 128 code  0 keep state (max 32)
  pass     log inet6 proto icmp6             icmp6-type 129 code  0 keep state (max 32)

  # Mobile IPv6 messages that are needed to assist mobility
  pass log inet6 proto icmp6 icmp6-type { 144 145 146 147 }

  # RFC 4890, section 4.4
  # ff02::1: ff00:2:
  pass log inet6 proto icmp6 \
   to { (self) ff02::/16 } \
   icmp6-type { 130 131 132 133 134 135 136 137 141 142 143 148 149 151 152 153 }
 }
}

# Services on [self: keep state] [other: synproxy state]
# (!) Global table manipulation from main ruleset only
# max:               max concurrent connections
# source-track rule: max connections limit by max-src-nodes and max-src-states
#                    (rule per ip, not global)
# max-src-nodes:     max simultaneous sources
# max-src-states:    max simultaneous connection from the same source
# max-src-conn:      max simultaneous established connections from same source
# max-src-conn-rate: max rate of new 3way connections over a time interval (sec)

# Allow traceroute
#pass in log on egress inet proto udp to (egress) port { 33435:33525 }
